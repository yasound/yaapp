#!/bin/bash
#
# yasound django app
# Iguanesolution 2012 
#
# chkconfig: - 64 36
# description:  Gunicorn for yasound
# processname: gunicorn
# config: /etc/gunicorn/gunicorn.py
# pidfile: /data/tmp/gnucorn_yaapp.pid
### BEGIN INIT INFO
# Provides:          yaapp
# Required-Start:    $nginx $syslog
# Required-Stop:     $nginx $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start yaapp 
# Description:       Enable yasound django application.
### END INIT INFO

export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/usr/sbin:/bin:/usr/bin

NAME="yaapp (Gunicorn)"

ENV="development"

TIMEOUT=${TIMEOUT-60}
USER=customer
DAEMON="/usr/bin/gunicorn"
APP_ROOT=/var/www/dev.yasound.com/root/yaapp/
PID="/tmp/gnucorn_yaapp.pid"
CONFFILE=/etc/gunicorn/gunicorn.py

APP=deploy

#OPTIONS="DJANGO_MODE="$ENV" $DAEMON -D -c $CONFFILE"
OPTIONS="$DAEMON -D $APP -c $CONFFILE"
CMD="exec $OPTIONS"
RETVAL=0

# source function library
. /lib/lsb/init-functions

test -x $DAEMON || exit 0

# Feel free to change any of the following variables for your app:

old_pid="$PID.oldbin"

whoami=$(whoami)

if ! [ ${UID} -eq 0 -o "x${whoami}" = "xcustomer" ];then
  echo "error id"
  exit 2
fi

cd $APP_ROOT || exit 1

export DJANGO_MODE=${ENV}

sig () {
  test -s "$PID" && kill -$1 `cat $PID`
}

oldsig () {
  test -s $old_pid && kill -$1 `cat $old_pid`
}

workersig () {
  workerpid="/tmp/gnucorn_yaapp.pid.$2.pid"
  test -s "$workerpid" && kill -$1 `cat $workerpid`
}

case $1 in
  start)
    sig 0 && echo >&2 "Already running" && exit 0
    #start-stop-daemon --start --chdir $APP_ROOT --chuid ${USER} --exec $CMD -- ${OPTIONS}
    if [ ${UID} -eq 0  ];then
       su ${USER} -c "${CMD}"
    else
       ${CMD}
    fi
    ;;
  stop)
    sig QUIT && exit 0
    echo >&2 "Not running"
    ;;
  force-stop)
    sig TERM && exit 0
    echo >&2 "Not running"
    ;;
  restart|reload)
    sig HUP && echo reloaded OK && exit 0
    echo >&2 "Couldn't reload, starting '$CMD' instead"
    if [ ${UID} -eq 0  ];then
       su ${USER} -c "${CMD}"
    else
       ${CMD}
    fi
    #start-stop-daemon --start --quiet --chdir ${APP_ROOT} --chuid ${USER} --exec "$CMD" -- ${OPTIONS}
    ;;
  upgrade)
    #sig 0 || { su - ${USER} -c "${CMD}" && exit 0; }
     start=0
     sig 0 || { echo "Start Yaap" && start=1; }
     if [ $start -eq 1 ];then
    	    if [ ${UID} -eq 0  ];then
	       su ${USER} -c "${CMD}"
	    else
	       ${CMD}
	    fi
	exit 0;
     fi

    echo "Upgrading Yaapp"
    sig USR2
    sleep 2

    echo -n "Waiting new master pid"
    n=$TIMEOUT
    while test $n -ge 0 && test ! -s $PID
    do
        printf '.' && sleep 1 && n=$(( $n - 1 ))
    done
    echo

    echo -n "Waiting for workers to spawn"
    n=$TIMEOUT
    while test $n -ge 0 && test ! -s $PID -a $(ps --ppid  $(cat $PID) --no-headers|wc -l) -le 1
    do
        printf '.' && sleep 1 && n=$(( $n - 1 ))
    done
    echo

    echo -n "New version loaded, kill old workers softly"
    oldsig WINCH
    # Wait for all workers to finish
    n=$TIMEOUT
    while test $n -ge 0 && test $(ps --ppid  $(cat $old_pid) --no-headers|wc -l) -gt 1
    do
        printf '.' && sleep 1 && n=$(( $n - 1 ))
    done
    echo

    echo "Killing old master"
    oldsig QUIT
    n=$TIMEOUT
    if test $n -lt 0 && test -s $old_pid
    then
        echo >&2 "$old_pid still exists after $TIMEOUT seconds"
        exit 1
    fi
    echo "Upgrade successfull"
    ;;

  kill_worker)
    workersig QUIT $2 && exit 0
    echo >&2 "Worker not running"
    ;;
  rotate)
    sig USR1 && echo rotated logs OK && exit 0
    echo >&2 "Couldn't rotate logs" && exit 1
    ;;
  *)
    echo >&2 "Usage: $0 <start|stop|restart|upgrade|rotate|force-stop>"
    exit 1
  ;;
esac
